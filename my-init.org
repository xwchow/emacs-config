#+STARTUP: overview

* interface
#+BEGIN_SRC emacs-lisp
;; Backups into a separate directory
(add-to-list 'backup-directory-alist '("." . "~/.saves") :append)
(customize-set-variable 'backup-by-copying t)
(customize-set-variable 'delete-old-versions t)
(customize-set-variable 'kept-new-versions 6)
(customize-set-variable 'kept-old-versions 2)
(customize-set-variable 'version-control t)

(setq inhibit-startup-message t)

(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(column-number-mode t)
(global-linum-mode t)
(show-paren-mode t)
(setq ring-bell-function 'ignore)

;; Set default font
(set-face-attribute 'default nil
                    :family "Ubuntu Mono"
                    :height 120
                    :weight 'normal
                    :slant 'normal
                    :width 'normal)
(if (eq system-type 'darwin)
    (set-face-attribute 'default nil
                    :family "Monaco"
                    :height 140
                    :weight 'normal
                    :slant 'normal
                    :width 'normal))

(use-package exec-path-from-shell :ensure t
  :init (if (eq system-type 'darwin)
            (add-to-list 'my-packages 'exec-path-from-shell)))

(global-auto-revert-mode t)
(setq auto-revert-verbose nil)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* programming config
** general
#+BEGIN_SRC emacs-lisp
;; (use-package highlight-parentheses :ensure t
;;   :init (global-highlight-parentheses-mode t))

(use-package expand-region :ensure t
  :bind ("C-r" . er/expand-region))

(use-package company :ensure t
  :init (global-company-mode t))

;; use space to indent by default
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(use-package smartparens :ensure t
  :init (add-hook 'prog-mode-hook 'turn-on-smartparens-mode))

;; requires global package
(use-package ggtags :ensure t
  :bind (:map ggtags-mode-map
              ("C-=" . ggtags-find-tag-dwim))
  :init (add-hook 'c-mode-common-hook
                  (lambda ()
                    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                      (ggtags-mode t)))))

(use-package flycheck :ensure t
  :init (global-flycheck-mode t)
  :config (progn
            (setq-default flycheck-clang-language-standard "c++14")
            (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))))

(use-package yasnippet :ensure t
  :init (yas-global-mode 1))

;; Keyboard shortcuts
(global-set-key (kbd "C--") 'pop-tag-mark)
(global-set-key (kbd "C-c w") 'wdired-change-to-wdired-mode)
(global-set-key (kbd "C-c W") 'whitespace-mode)

(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "C-n") 'company-select-next)

(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR." t)
(global-set-key (kbd "M-z") 'zap-up-to-char)

(global-set-key (kbd "M-o") 'ff-find-other-file)
#+END_SRC

** org-mode
#+BEGIN_SRC emacs-lisp
(setq-default org-src-fontify-natively t)
(setq-default org-src-preserve-indentation t)
(setq-default org-src-tab-acts-natively t)
#+END_SRC

** python
#+BEGIN_SRC emacs-lisp
;; (use-package ein :ensure t)
(use-package elpy :ensure t
  :bind (:map elpy-mode-map
              ("C-=" . elpy-goto-definition))
  :init (progn (elpy-enable)
               (setq elpy-rpc-python-command "python3.6")
               (elpy-use-ipython "ipython3")))

;; flycheck instead of flymake
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
#+END_SRC

** c++
#+BEGIN_SRC emacs-lisp
(setq-default c-default-style "linux"
              c-basic-offset 2)

(sp-local-pair 'c++-mode "{" nil :post-handlers
               '((my-create-newline-and-enter-sexp "RET")))

(defun my-create-newline-and-enter-sexp (&rest _ignored)
  "Open a new brace or bracket expression, with relevant newlines and indent. "
  (newline)
  (indent-according-to-mode)
  (forward-line -1)
  (indent-according-to-mode))
#+END_SRC
   
** php
#+BEGIN_SRC emacs-lisp
(use-package web-mode :ensure t
  :init (add-to-list 'auto-mode-alist '("\\.php$" . web-mode)))
#+END_SRC

** ruby
#+BEGIN_SRC emacs-lisp
(use-package rvm :ensure t
  :init (rvm-use-default))

(use-package inf-ruby :ensure t
  :bind (:map inf-ruby-minor-mode-map
              ("C-c C-c" . ruby-send-block)))
#+END_SRC

** html/css
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode :ensure t
  :init (progn
          (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
          (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
          (setq web-mode-enable-css-colorization t)
))
#+END_SRC
   
** lisp/scheme/clojure
#+BEGIN_SRC emacs-lisp
(use-package cider :ensure t
  :bind ("C-q" . cider-doc))
(use-package geiser :ensure t)
(use-package clojure-mode-extra-font-locking :ensure t)
(use-package rainbow-delimiters :ensure t
  :init (progn 
          (add-hook 'emacs-lisp-mode-hook       'rainbow-delimiters-mode)
          (add-hook 'eval-expression-minibuffer-setup-hook 'rainbow-delimiters-mode)
          (add-hook 'ielm-mode-hook             'rainbow-delimiters-mode)
          (add-hook 'lisp-mode-hook             'rainbow-delimiters-mode)
          (add-hook 'lisp-interaction-mode-hook 'rainbow-delimiters-mode)
          (add-hook 'scheme-mode-hook           'rainbow-delimiters-mode)))
(use-package paredit :ensure t
  :init (progn 
          (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
          (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
          (add-hook 'ielm-mode-hook             'enable-paredit-mode)
          (add-hook 'lisp-mode-hook             'enable-paredit-mode)
          (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
          (add-hook 'scheme-mode-hook           'enable-paredit-mode)
          (add-hook 'clojure-mode-hook          'enable-paredit-mode)))
#+END_SRC

* misc packages
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)

(use-package try :ensure t)

;; brings up key suggestions
(use-package which-key :ensure t
  :config (which-key-mode))

;; flashes the cursor's line when you scroll
(use-package beacon :ensure t
  :config (beacon-mode 1))

;; deletes all the whitespace when you hit backspace or delete
(use-package hungry-delete :ensure t
  :config (global-hungry-delete-mode t))

;; expand the marked region in semantic increments (negative prefix to reduce region)
(use-package expand-region :ensure t
  :config (global-set-key (kbd "M-=") 'er/expand-region))

;; mark and edit all copies of the marked region simultaniously.
(use-package iedit :ensure t)

(use-package undo-tree :ensure t
  :init (global-undo-tree-mode t))

#+END_SRC
* other
#+BEGIN_SRC emacs-lisp
;; save location in file
(use-package saveplace :ensure t
  :config (setq-default save-place t))

(use-package cyberpunk-theme :ensure t
  :config (load-theme 'cyberpunk t))

(use-package magit :ensure t
  :bind ("C-x g" . magit-status))

(use-package crux :ensure t
  :bind (("C-c s" . crux-transpose-windows)
         ("C-c o" . crux-open-with)
         ("C-c n" . crux-cleanup-buffer-or-region)
         ("C-c I" . crux-find-user-init-file)))

(use-package ace-window :ensure t
  :bind ("C-x o" . ace-window))

;; swiper
(use-package swiper  :ensure t
  :init (use-package counsel :ensure t)
  :bind (("C-s" . swiper)
;;         ("C-r" . swiper)
         ("C-c C-r" . ivy-resume)
         ("M-x" . counsel-M-x)
         ("C-c k" . counsel-ag) ;; requires silversearcher-ag package
         ("C-x C-f" . counsel-find-file))
  :config (progn (ivy-mode 1)
                 (setq ivy-use-virtual-buffers t)
                 (setq ivy-display-style 'fancy)
                 (setq enable-recursive-minibuffers t)))

;; auto-highlight-symbol
(use-package auto-highlight-symbol :ensure t
  :init (progn
          (global-auto-highlight-symbol-mode)
          (define-key auto-highlight-symbol-mode-map (kbd "M-p") 'ahs-backward)
          (define-key auto-highlight-symbol-mode-map (kbd "M-n") 'ahs-forward)
          (setq ahs-idle-interval 1.0)))

;; ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer-other-window)
(setq-default ibuffer-default-sorting-mode 'major-mode)
#+END_SRC

* TODO
  + smartparens 
